

PRINT @CLIENTE
PRINT @IDADE
PRINT @DATANASCIMENTO	
PRINT @CUSTO

/* exercício 1 T-SQL*/
DECLARE @CLIENTE VARCHAR(10) = 'João'
DECLARE @IDADE INT = 10
DECLARE @DATANASCIMENTO DATE = '20070110'
DECLARE @CUSTO FLOAT = 10.23

PRINT @CLIENTE
PRINT @IDADE
PRINT @DATANASCIMENTO	
PRINT @CUSTO

/* exercício 2 T-SQL*/
DECLARE @NUMNOTAS INT
SELECT  @NUMNOTAS = COUNT(*) FROM [NOTAS FISCAIS] 
WHERE [DATA] = '20170101' 
PRINT @NUMNOTAS

/* exercício 3 T-SQL*/
IF OBJECT_ID('TABLE_TESTE','U') IS NOT NULL
BEGIN
	DROP TABLE TABLE_TESTE
END
ELSE
BEGIN
	CREATE TABLE TABLE_TESTE (ID VARCHAR(10))
END
--Foi visto o conceito de tabelas temporárias

-- exercício 4 Funções em TSQL	
 CREATE FUNCTION FaturamentoNota (@NUMERO AS INT) RETURNS FLOAT
 AS 
 BEGIN
	DECLARE @FATURAMENTO FLOAT
	SELECT @FATURAMENTO = SUM(QUANTIDADE * [PREÇO]) FROM [ITENS NOTAS FISCAIS]
	WHERE NUMERO = 100
	RETURN @FATURAMENTO
 END

 SELECT NUMERO, [dbo].[FaturamentoNota](NUMERO) AS FATURAMENTO FROM [NOTAS FISCAIS]

 -- exercício 5 Criando função que retorna uma tabela
 CREATE FUNCTION ListaNotasClientes (@CPF AS VARCHAR(12)) RETURNS TABLE
 AS
 RETURN SELECT * FROM [NOTAS FISCAIS] WHERE CPF = @CPF 

 SELECT * FROM [dbo].[ListaNotasClientes]('1471156710')

 --Exercicio 6, criando uma procedure
CREATE PROCEDURE BuscaPorEntidades @ENTIDADE AS VARCHAR(10)
AS
BEGIN
IF @ENTIDADE = 'CLIENTES'
    SELECT [CPF] AS IDENTIFICADOR, [NOME] AS DESCRITOR, 
        [BAIRRO] AS BAIRRO FROM [TABELA DE CLIENTES]
ELSE IF @ENTIDADE = 'VENDEDORES'
    SELECT [MATRICULA] AS IDENTIFICADOR, [NOME] AS DESCRITOR, 
        [BAIRRO] AS BAIRRO FROM [TABELA DE VENDEDORES]
END
EXEC BuscaPorEntidades @ENTIDADE = 'CLIENTES'

--Exercicio 7, criando uma procedure para atualizar o campo idade coom base na data atual
CREATE PROCEDURE CalculaIdade
AS
BEGIN
	UPDATE [TABELA DE CLIENTES] SET IDADE = DATEDIFF(YEAR, [DATA DE NASCIMENTO],GETDATE())
END

 